#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

shopt -s nullglob

[[ -r @libdir@/util-msg.sh ]] && source @libdir@/util-msg.sh
[[ -r @libdir@/util.sh ]] && source @libdir@/util.sh

display_settings(){
    msg "manjaro-tools"
    msg2 "version: ${version}"

    msg "OPTIONS:"
    msg2 "arch: ${arch}"
    msg2 "branch: ${branch}"
    msg2 "chroots: ${chroots}"
    
    msg "ARGS:"
    msg2 "mkchrootpkg_args: ${mkchrootpkg_args[*]}"
    msg2 "makepkg_args: ${makepkg_args[*]}"
    
    msg "PATHS:"
    msg2 "chrootdir: ${chrootdir}"
    msg2 "profiledir: ${profiledir}"
    msg2 "pkg_dir: ${pkg_dir}"
    msg2 "pacman_conf: ${pacman_conf}"
    msg2 "makepkg_conf: ${makepkg_conf}"
    msg2 "pm_conf: ${pm_conf}"
    
    msg "BLACKLIST:"
    msg2 "blacklist_trigger: ${blacklist_trigger[*]}"
    msg2 "blacklist: ${blacklist[*]}"
    
    if ${clean_first};then
	msg "PKG:"
	msg2 "base_packages: ${base_packages[*]}"
    fi

    msg "SETS:"
    msg2 "profiles: $(load_sets)"
    msg2 "profile: ${profile}"
    msg2 "is_profile: ${is_profile}"

    if ${is_profile};then
	msg "Build queue:"
	local list=$(cat ${profiledir}/${profile}.set)
	for item in ${list[@]}; do
	    msg2 "$item"
	done
    else
	msg "Build queue:"
	for arg in "${makepkg_args[@]}"; do
	    case ${arg} in
		--pkg) continue ;;
		-*) continue ;;
		*) local split_arg=${arg} ;;
	    esac
	done
	if [[ -n ${split_arg} ]]; then
	    local IFS=','
	    for item in ${split_arg}; do
		msg2 "$item"
	    done
	    unset IFS
	else
	    msg2 "${profile}"
	fi
    fi
}

eval_profile(){
    eval "case $1 in
	    $(load_sets)) is_profile=true ;;
	    *) is_profile=false ;;
	esac"
}

chroot_create(){
    mkdir -p "${chrootdir}"
    setarch "${arch}" mkchroot \
	    ${mkchroot_args[*]} \
	    "${chrootdir}/root" \
	    ${base_packages[*]} || abort
}

chroot_clean(){
    for copy in "${chrootdir}"/*; do
	[[ -d ${copy} ]] || continue
	msg2 "Deleting chroot copy '$(basename "${copy}")'..."

	lock 9 "${copy}.lock" "Locking chroot copy '${copy}'"

	if [[ "$(stat -f -c %T "${copy}")" == btrfs ]]; then
	    { type -P btrfs && btrfs subvolume delete "${copy}"; } &>/dev/null
	fi
	rm -rf --one-file-system "${copy}"
    done
    exec 9>&-
    
    rm -rf --one-file-system "${chrootdir}"
}

chroot_update(){
    lock 9 "${chrootdir}/root.lock" "Locking clean chroot"
    chroot-run ${mkchroot_args[*]} \
	      "${chrootdir}/root" \
	      pacman -Syu --noconfirm || abort
}

clean_up(){
    msg "Cleaning up ..."
    
    local query=$(find ${pkg_dir} -maxdepth 1 -name "*.*")
    
    [[ -n $query ]] && rm -v $query
    
    if [[ -z $LOGDEST ]];then
	query=$(find $PWD -maxdepth 2 -name '*.log')
	[[ -n $query ]] && rm -v $query
    fi
    
    if [[ -z $SRCDEST ]];then
	query=$(find $PWD -maxdepth 2 -name '*.?z?')
	[[ -n $query ]] && rm -v $query
    fi
}

blacklist_pkg(){
    msg "Removing ${blacklist[@]}..."
    for item in "${blacklist[@]}"; do
	chroot-run $1/root pacman -Rdd "$item" --noconfirm
    done
}

prepare_cachedir(){
    mkdir -p "${pkg_dir}"
    chown -R "${pkg_owner}:users" "${pkg_dir_loaded}"
}

move_pkg(){
    local ext='pkg.tar.xz'
    if [[ -n $PKGDEST ]];then
	mv $PKGDEST/*{any,$arch}.${ext} ${pkg_dir}/
    else
	mv *.${ext} ${pkg_dir}
    fi
    chown -R "${pkg_owner}:users" "${pkg_dir_loaded}"
}

chroot_build(){
    if ${is_profile};then
	msg "Start building profile: [${profile}]"
	for pkg in $(cat ${profiledir}/${profile}.set); do
	    cd $pkg
	    for p in ${blacklist_trigger[@]}; do
		if [[ $pkg == $p ]]; then
		    blacklist_pkg "${chrootdir}"
		fi
	    done
	    setarch "${arch}" \
		mkchrootpkg ${mkchrootpkg_args[*]} -- ${makepkg_args[*]} || break
	    move_pkg
	    cd ..
	done
	msg "Finished building profile: [${profile}]"
    else
	cd ${profile}
	for p in ${blacklist_trigger[@]}; do
	    if [[ ${profile} == $p ]]; then
		blacklist_pkg "${chrootdir}"
	    fi
	done
	setarch "${arch}" \
	    mkchrootpkg ${mkchrootpkg_args[*]} -- ${makepkg_args[*]} || abort
	move_pkg
	cd ..
    fi
}

chroot_init(){
    if ${clean_first} || [[ ! -d "${chrootdir}" ]]; then
	msg "Creating chroot for [${branch}] (${arch})..."
	chroot_clean
	chroot_create
    else
	msg "Updating chroot for [${branch}] (${arch})..."
	chroot_update
    fi
}

sign_pkgs(){
    cd $pkg_dir
    su "${pkg_owner}" <<'EOF'
signpkgs
EOF
}

export LC_MESSAGES=C

load_config '@sysconfdir@' '@pkgdatadir@'

pkg_owner=${SUDO_USER:-$USER}

if [[ -n $SUDO_USER ]]; then
    eval "USER_HOME=~$SUDO_USER"
else
    USER_HOME=$HOME
fi

load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

pacman_conf_arch='default'
base_packages=('base-devel')

clean_first=false
wipe_clean=false
namcap=false
pretend=false
is_profile=false
sign=false

usage() {
    echo "Usage: ${0##*/} [options] [--] [makepkg args]"
    echo "    -p <profile>       Set profile or pkg [default: ${profile}]"
    echo "    -a <arch>          Set arch  [default: ${arch}]"
    echo "    -b <branch>        Set branch [default: ${branch}]"
    echo "    -r <dir>           Chroots directory [default: ${chroots}]"
    echo '    -c                 Recreate chroot'
    echo '    -w                 Clean up'
    echo '    -n                 Install and run namcap check'
    echo '    -s                 Sign packages'
    echo '    -q                 Query settings and pretend build'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit 1
}

orig_argv=("$@")

opts='p:a:b:r:cwnsqh'

while getopts "${opts}" arg; do
    case "${arg}" in
	p) profile="$OPTARG" ;;
	a) arch="$OPTARG" ;;
	b) branch="$OPTARG" ;;
	r) chroots="$OPTARG" ;;
	c) clean_first=true ;;
	w) wipe_clean=true ;;
	n) namcap=true; mkchrootpkg_args+=(-n) ;;
	s) sign=true ;;
	q) pretend=true ;;
	h) usage ;;
    esac
done

if [[ "$arch" == 'multilib' ]]; then
    pacman_conf_arch='multilib'
    base_packages+=('multilib-devel')
    arch='x86_64'
fi

chrootdir=${chroots}/${branch}/${arch}
pkg_dir_loaded=${pkg_dir}
pkg_dir="${pkg_dir}/${branch}/${arch}"

pacman_conf="@pkgdatadir@/pacman-${pacman_conf_arch}.conf"
makepkg_conf="@pkgdatadir@/makepkg-${arch}.conf"
pm_conf="@pkgdatadir@/pacman-mirrors-${branch}.conf"

mkchroot_args+=(-C ${pacman_conf} -M ${makepkg_conf} -S ${pm_conf})

mkchrootpkg_args+=(-r ${chrootdir})

makepkg_args+=("${@:$OPTIND}")

check_root "$0" "${orig_argv[@]}"

[[ -d "${pkg_dir}" ]] || prepare_cachedir

eval_profile "${profile}"

${pretend} && display_settings && exit

${wipe_clean} && clean_up

chroot_init 

chroot_build

${sign} && sign_pkgs
