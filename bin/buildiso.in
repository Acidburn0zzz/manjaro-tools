#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

[[ -r @libdir@/util-msg.sh ]] && source @libdir@/util-msg.sh
[[ -r @libdir@/util.sh ]] && source @libdir@/util.sh
[[ -r @libdir@/util-iso.sh ]] && source @libdir@/util-iso.sh
# [[ -r @libdir@/util-mount.sh ]] && source @libdir@/util-mount.sh

display_settings(){
    msg "manjaro-tools"
    msg2 "version: ${version}"
    msg2 "manjaro_tools_conf: ${manjaro_tools_conf}"
    if [[ -f $USER_HOME/.config/manjaro-tools.conf ]]; then
	msg2 "user_config: $USER_HOME/.config/manjaro-tools.conf"
    fi
    
    msg "OPTIONS:"
    msg2 "arch: ${arch}"
    msg2 "branch: ${branch}"
    msg2 "work_dir: ${work_dir}"
    msg2 "target_dir: ${target_dir}"
    msg2 "pacman_conf: ${pacman_conf}"

    msg "ARGS:"
    msg2 "xorg_overlays: ${xorg_overlays}"
    msg2 "kde_lng_packages: ${kde_lng_packages}"
    msg2 "high_compression: ${high_compression}"
    
    msg "ISO SETTINGS:"
    msg2 "iso_label: ${iso_label}"
    msg2 "iso_version: ${iso_version}"
    msg2 "manjaro_kernel: ${manjaro_kernel}"
    msg2 "manjaro_kernel_ver: ${manjaro_kernel_ver}"
    msg2 "manjaro_version: ${manjaro_version}"
    msg2 "manjaroiso: ${manjaroiso}"
    msg2 "code_name: ${code_name}"
    msg2 "img_name: ${img_name}"
    msg2 "install_dir: ${install_dir}"
    msg2 "plymouth_theme: ${plymouth_theme}"
    msg2 "compression: ${compression}"
    
    msg "LIVECD:"
    msg2 "username: ${username}"
    msg2 "password: ${password}"
    msg2 "encrypted password: $(gen_pw)"
    msg2 "addgroups: ${addgroups}"
    msg2 "hostname: ${hostname}"
    msg2 "pacman_mirrors: ${mirrors_conf}"

    msg "ISOFILE:"
    msg2 "iso_file: ${iso_file}"
}

copy_manjaro_tools_conf(){
	local livecd=$1
	
	[[ ! -d ${livecd} ]] && mkdir ${livecd}
	if [[ -f $USER_HOME/.config/manjaro-tools.conf ]]; then
	    msg2 "Copying $USER_HOME/.config/manjaro-tools.conf to ${livecd}/manjaro-tools.conf ..."
	    cp $USER_HOME/.config/manjaro-tools.conf ${livecd}/manjaro-tools.conf
	else
	    msg2 "Copying ${manjaro_tools_conf} to ${livecd}/manjaro-tools.conf ..."
	    cp ${manjaro_tools_conf} ${livecd}/manjaro-tools.conf
	fi
}

copy_livecd(){
    local livecd=$1
    
    msg2 "Copying $1/livecd to ${work_dir}/overlay/opt ..."
    [[ ! -d ${work_dir}/overlay/opt ]] && mkdir -p ${work_dir}/overlay/opt
    cp -r $1/livecd ${work_dir}/overlay/opt
    
    msg2 "Fixing livecd script permissions ..."
    chmod 755 ${work_dir}/overlay/opt/livecd/{livecd,mhwd,lg,km,ejectcd,disable-dpms,pulseaudio-ctl-normal,setup,setup-0.8,setup-0.9,update-setup}
    chmod +x ${work_dir}/overlay/opt/livecd/{livecd,mhwd,lg,km,ejectcd,disable-dpms,pulseaudio-ctl-normal,setup,setup-0.8,setup-0.9,update-setup}
}

copy_util_sh(){
    local util=$1
    msg2 "Copying @libdir@/util.sh to $1/util-config.sh ..."
    cp @libdir@/util.sh $1/util-config.sh
}

# Prepare overlay-image
make_overlay() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
	msg "Prepare overlay-image"
	
        mkdir -p ${work_dir}/overlay/etc/pacman.d
      
	msg2 "Copying overlay-livecd to ${work_dir}/overlay ..."
        cp -LPdr overlay-livecd/* ${work_dir}/overlay
        
	copy_livecd '@pkgdatadir@'
	        
        #wget -O ${work_dir}/overlay/etc/pacman.d/mirrorlist http://git.manjaro.org/packages-sources/basis/blobs/raw/master/pacman-mirrorlist/mirrorlist
        
	# copy over manjaro-tools.conf
	copy_manjaro_tools_conf "${work_dir}/overlay/opt/livecd"
        
        # copy over the config loader lib to load manjaro-tools.conf vars
        copy_util_sh "${work_dir}/overlay/opt/livecd"
        
        cp ${work_dir}/root-image/etc/pacman.d/mirrorlist ${work_dir}/overlay/etc/pacman.d/mirrorlist
        sed -i "s/#Server/Server/g" ${work_dir}/overlay/etc/pacman.d/mirrorlist
        sed -i "s/^.*TITLE=.*/  TITLE=\"Manjaro Linux Installation Framework (v${iso_version})\"/g" ${work_dir}/overlay/opt/livecd/setup
        #chmod -R 755 ${work_dir}/overlay/home
        : > ${work_dir}/build.${FUNCNAME}
	msg "Done"
    fi
}

iso_owner=${SUDO_USER:-$USER}

if [[ -n $SUDO_USER ]]; then
    eval "USER_HOME=~$SUDO_USER"
else
    USER_HOME=$HOME
fi

load_config "$USER_HOME/.config/manjaro-tools.conf"  
load_config '@sysconfdir@/manjaro-tools.conf'

load_desktop_definitions

clean_first=false
pretend=false
high_compression=false
verbose=false
overwrite=false
xorg_overlays=false
kde_lng_packages=false

pacman_conf_arch='default'

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -a <arch>          Set arch [default: ${arch}]"
    echo "    -b <branch>        Set branch [default: ${branch}]"
    echo "    -r <dir>           Work directory [default: ${work_dir}]"
    echo "    -t <dir>           Target iso directory [default: ${target_dir}]"
    echo "    -i <file>          Config file for pacman"
    echo "                       [default: @pkgdatadir@/pacman-${pacman_conf_arch}.conf]"
    echo '    -c                 Clean work dir'
    echo '    -v                 Verbose'
    echo '    -f                 Overwrite'
    echo '    -z                 High compression'
    echo '    -x                 Xorg overlays'
    echo '    -k                 kde lng packages'
    echo '    -q                 Query settings and pretend build'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit 1
}

orig_argv=("$@")

opts='a:b:r:t:i:cvfzqxkh'

while getopts "${opts}" arg; do
    case "${arg}" in
	a) arch="$OPTARG" ;;
	b) branch="$OPTARG" ;;
	r) work_dir="$OPTARG" ;;
	t) target_dir="$OPTARG" ;;
	c) clean_first=true ;;
	v) verbose=true; iso_args+=(-v) ;;
	f) overwrite=true; iso_args+=(-f) ;;
	z) high_compression=true; iso_args+=(-x) ;;
	x) xorg_overlays=true ;;
	k) kde_lng_packages=true ;;
	i) pacman_conf="$OPTARG" ;;
	q) pretend=true ;;
	h) usage ;;
    esac
done

shift $(($OPTIND - 1))

work_dir=${work_dir}/${desktop}/${arch}

if [[ "$arch" == 'x86_64' ]]; then
    pacman_conf_arch='multilib'
fi

load_pacman_conf "${pacman_conf}"
load_pacman_conf "@pkgdatadir@/pacman-${pacman_conf_arch}.conf" 
mirrors_conf="@pkgdatadir@/pacman-mirrors-${branch}.conf"

create_args+=(-v -a ${arch} -D ${install_dir} -C ${pacman_conf} -M ${mirrors_conf})

iso_args+=(-a ${arch} -D ${install_dir} -L ${iso_label} -c ${compression})

iso_file="${target_dir}/${img_name}-${desktop}-${iso_version}-${arch}.iso"

iso_profile=${PWD##*/}


check_root "$0" "${orig_argv[@]}"

get_pkglist

if [ -e Packages-Xorg ] ; then
    get_pkglist_xorg
fi

if [ -e Packages-Lng ] ; then
    get_pkglist_lng
fi

if [ -e "${pkgsfile}" ] ; then
    get_pkglist_de
fi

${pretend} && display_settings && exit 1

${clean_first} && clean_up

prepare_targetdir

# install basic
make_root_image
make_overlay

# install DE(s)
if [ -e "${pkgsfile}" ] ; then
    make_de_image
fi

# install xorg-drivers
if [ -e Packages-Xorg ] ; then
    make_pkgs_image
fi
# install translations
if [ -e Packages-Lng ] ; then
    make_lng_image
fi
# install common
make_boot
if [ "${arch}" == "x86_64" ]; then
    make_efi
    make_efiboot
fi
make_isolinux

make_isomounts
make_iso
